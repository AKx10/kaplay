const path = require("path");
const { writeFileSync, readFileSync } = require("fs");

const rootDir = path.resolve(__dirname, "..");

const content = readFileSync(path.join(rootDir, "/src/types.ts")).toString();

// Worth noting that these regexes assume that `\t` is being used as 1 indention block.
// If tabs are changed to spaces, this should be changed to ` {n}` (where n is the count of spaces)
// and `indention` should be changed to that.
const indention = "	";

// This regex will capture everything in the KaboomCtx block (assuming its indented)
const ctx = content.match(/(?<=type KaboomCtx = {)((?!^}).)+/ms).toString();

// Handy lil regex that'll match every key of a tab indented ts type
// and the comment directly before it, if there is one.
const keys = ctx.matchAll(/(\/\*((?!\*\/).)*\*\/\s*\n)?^\t([a-z]+)/gims);

let str = `// Generated by \`${path.relative(rootDir, __filename)}\` do not edit

import type { KaboomCtx } from './kaboom';

declare global {
`;


// Since TS has function overloading and such, however we only want to declare the global variable once.
// The TS type for this is `Record<string, [name: string, comment?: string]>`
const uniqueKeys = {};

for (const [_, comment, __, name] of Array.from(keys)) {
  if (!uniqueKeys[name]) {
    uniqueKeys[name] = comment ? [name, comment] : [name];
    continue;
  }

  if (uniqueKeys[name].length === 1 && comment) {
    uniqueKeys[name].push(comment);
  }
}

for (const [name, comment] of Object.values(uniqueKeys)) {
  if (comment) {
    str += indention + comment;
  }

  str += indention + `const ${name}: KaboomCtx['${name}'];` + "\n";
}

str += "}\n";

writeFileSync("../dist/global.d.ts", str);
