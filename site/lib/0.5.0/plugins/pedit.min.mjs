var w=(r,o)=>()=>(o||r((o={exports:{}}).exports,o),o.exports);var m=(r,o,t)=>new Promise((i,n)=>{var s=e=>{try{a(t.next(e))}catch(h){n(h)}},c=e=>{try{a(t.throw(e))}catch(h){n(h)}},a=e=>e.done?i(e.value):Promise.resolve(e.value).then(s,c);a((t=t.apply(r,o)).next())});var p=w((x,g)=>{g.exports=r=>{function o(i){let n=new Image;return n.crossOrigin="",n.src=i,new Promise((s,c)=>{n.onload=()=>{s(n)},n.onerror=()=>{c()}})}function t(i,n){let s=r.newLoader();return new Promise((c,a)=>{fetch(r.loadRoot()+n).then(e=>e.json()).then(e=>m(this,null,function*(){let h=yield Promise.all(e.frames.map(o)),l=document.createElement("canvas");l.width=e.width,l.height=e.height*e.frames.length;let d=l.getContext("2d");return h.forEach((f,u)=>{d.drawImage(f,0,u*e.height)}),r.loadSprite(i,l,{sliceY:e.frames.length,anims:e.anims})})).then(e=>{c(e)}).catch(()=>{error(`failed to load sprite '${i}' from '${n}'`),a()}).finally(()=>{s.done()})})}return{loadPedit:t}}});export default p();
//# sourceMappingURL=pedit.min.mjs.map
